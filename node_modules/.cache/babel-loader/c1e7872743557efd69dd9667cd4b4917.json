{"ast":null,"code":"var _jsxFileName = \"/home/ali/Desktop/react/ui-test/src/helper/Route/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo } from \"react\";\nimport { Redirect, Route as RRoute, useLocation } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { getCachedData } from \"../../client/cookieManager\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Route({\n  authorize,\n  children,\n  ...rest\n}) {\n  _s();\n\n  const {\n    pathname\n  } = useLocation();\n  const token = getCachedData(\"access_token\");\n  useEffect(() => {\n    curdApi.getProvinces({}).then(content => {\n      setProvinces(content.data);\n    });\n    curdApi.getCities({}).then(content => {\n      setCities(content.data);\n    });\n    setUpdate(false);\n  }, [update]);\n  return /*#__PURE__*/_jsxDEV(RRoute, { ...rest,\n    render: ({\n      location\n    }) => {\n      if (!token && pathname !== \"/login\") {\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: {\n            pathname: \"/login\",\n            state: {\n              from: location\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this);\n      } else if (!!token && pathname === \"/login\") {\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: {\n            pathname: \"/\",\n            state: {\n              from: location\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this);\n      } else {\n        return children;\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Route, \"+8VPq4+XDMjo/kjL3WLkbwU2Amg=\", false, function () {\n  return [useLocation];\n});\n\n_c = Route;\nRoute.propTypes = {\n  authorize: PropTypes.bool\n};\nexport default _c2 = /*#__PURE__*/memo(Route);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Route\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/ali/Desktop/react/ui-test/src/helper/Route/index.js"],"names":["React","memo","Redirect","Route","RRoute","useLocation","PropTypes","getCachedData","authorize","children","rest","pathname","token","useEffect","curdApi","getProvinces","then","content","setProvinces","data","getCities","setCities","setUpdate","update","location","state","from","propTypes","bool"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AACA,SAASC,QAAT,EAAmBC,KAAK,IAAIC,MAA5B,EAAoCC,WAApC,QAAuD,kBAAvD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,QAA8B,4BAA9B;;;AAEA,SAASJ,KAAT,CAAe;AAAEK,EAAAA,SAAF;AAAaC,EAAAA,QAAb;AAAuB,KAAGC;AAA1B,CAAf,EAAiD;AAAA;;AAC/C,QAAM;AAAEC,IAAAA;AAAF,MAAeN,WAAW,EAAhC;AACA,QAAMO,KAAK,GAAGL,aAAa,CAAC,cAAD,CAA3B;AACAM,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,OAAO,CAACC,YAAR,CAAqB,EAArB,EAAyBC,IAAzB,CAA+BC,OAAD,IAAa;AACzCC,MAAAA,YAAY,CAACD,OAAO,CAACE,IAAT,CAAZ;AACD,KAFD;AAIAL,IAAAA,OAAO,CAACM,SAAR,CAAkB,EAAlB,EAAsBJ,IAAtB,CAA4BC,OAAD,IAAa;AACtCI,MAAAA,SAAS,CAACJ,OAAO,CAACE,IAAT,CAAT;AACD,KAFD;AAIAG,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GAVQ,EAUN,CAACC,MAAD,CAVM,CAAT;AAWA,sBACE,QAAC,MAAD,OACMb,IADN;AAEE,IAAA,MAAM,EAAE,CAAC;AAAEc,MAAAA;AAAF,KAAD,KAAkB;AACxB,UAAI,CAACZ,KAAD,IAAUD,QAAQ,KAAK,QAA3B,EAAqC;AACnC,4BACE,QAAC,QAAD;AACE,UAAA,EAAE,EAAE;AACFA,YAAAA,QAAQ,EAAE,QADR;AAEFc,YAAAA,KAAK,EAAE;AAAEC,cAAAA,IAAI,EAAEF;AAAR;AAFL;AADN;AAAA;AAAA;AAAA;AAAA,gBADF;AAQD,OATD,MASO,IAAI,CAAC,CAACZ,KAAF,IAAWD,QAAQ,KAAK,QAA5B,EAAsC;AAC3C,4BACE,QAAC,QAAD;AACE,UAAA,EAAE,EAAE;AACFA,YAAAA,QAAQ,EAAE,GADR;AAEFc,YAAAA,KAAK,EAAE;AAAEC,cAAAA,IAAI,EAAEF;AAAR;AAFL;AADN;AAAA;AAAA;AAAA;AAAA,gBADF;AAQD,OATM,MASA;AACL,eAAOf,QAAP;AACD;AACF;AAxBH;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD;;GA1CQN,K;UACcE,W;;;KADdF,K;AA4CTA,KAAK,CAACwB,SAAN,GAAkB;AAChBnB,EAAAA,SAAS,EAAEF,SAAS,CAACsB;AADL,CAAlB;AAIA,kCAAe3B,IAAI,CAACE,KAAD,CAAnB","sourcesContent":["import React, { memo } from \"react\";\nimport { Redirect, Route as RRoute, useLocation } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { getCachedData } from \"../../client/cookieManager\";\n\nfunction Route({ authorize, children, ...rest }) {\n  const { pathname } = useLocation();\n  const token = getCachedData(\"access_token\");\n  useEffect(() => {\n    curdApi.getProvinces({}).then((content) => {\n      setProvinces(content.data);\n    });\n\n    curdApi.getCities({}).then((content) => {\n      setCities(content.data);\n    });\n\n    setUpdate(false);\n  }, [update]);\n  return (\n    <RRoute\n      {...rest}\n      render={({ location }) => {\n        if (!token && pathname !== \"/login\") {\n          return (\n            <Redirect\n              to={{\n                pathname: \"/login\",\n                state: { from: location },\n              }}\n            />\n          );\n        } else if (!!token && pathname === \"/login\") {\n          return (\n            <Redirect\n              to={{\n                pathname: \"/\",\n                state: { from: location },\n              }}\n            />\n          );\n        } else {\n          return children;\n        }\n      }}\n    />\n  );\n}\n\nRoute.propTypes = {\n  authorize: PropTypes.bool,\n};\n\nexport default memo(Route);\n"]},"metadata":{},"sourceType":"module"}