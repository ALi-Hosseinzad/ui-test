{"ast":null,"code":"import * as yup from \"yup\";\nconst userSchemaObject = {\n  password: yup.string().required((\"{field} is Required\", {\n    field: \"password\"\n  })).min(8, \"Password is too short - should be 8 chars minimum\"),\n  email: yup.string().matches(REGEX_PATTERNS.EMAIL, ({\n    originalValue,\n    value\n  }) => {\n    if (!!originalValue === false) {\n      return \"{field} is Required\", {\n        field: \"email\"\n      };\n    } else if (!REGEX_PATTERNS.EMAIL.test(value)) {\n      return \"Entered value is not correct\";\n    }\n  }),\n  token: yup.string().required((\"{field} is Required\", {\n    field: \"Verification code\"\n  })).min(5, \"Verification code is too short - should be 5 chars minimum\"),\n  totp: yup.string().required((\"{field} is Required\", {\n    field: \"google authenticator\"\n  })).length(6, \"Google authenticator should be 6 chars\").matches(/^[0-9]+$/gi, \"You must specify a number\"),\n  firstName: yup.string().required((\"{field} is Required\", {\n    field: \"First Name\"\n  })),\n  lastName: yup.string().required((\"{field} is Required\", {\n    field: \"Last Name\"\n  })),\n  nationalCode: yup.string(),\n  // .required((\"{field} is Required\", { field: (\"National Code\") }))\n  // .length(10, (\"National Code must be 10 charactor\"))\n  // .matches(/^[0-9]*$/gi, (\"Enter number only\")),\n  gender: yup.string().required((\"{field} is Required\", {\n    field: \"gender\"\n  })),\n  phonenumber: yup.string().required((\"{field} is Required\", {\n    field: \"phone number\"\n  })),\n  accountNumber: yup.string().matches(REGEX_PATTERNS.ACCOUNT_NUMBER, ({\n    originalValue,\n    value\n  }) => {\n    if (!!originalValue === false) {\n      return \"{field} is Required\", {\n        field: \"account number\"\n      };\n    } else if (!REGEX_PATTERNS.ACCOUNT_NUMBER.test(value)) {\n      return \"account number must be 16 charactor\";\n    }\n  }),\n  IbanNumber: yup.string().matches(REGEX_PATTERNS.IBAN_NUMBER, ({\n    originalValue,\n    value\n  }) => {\n    if (!!originalValue === false) {\n      return \"{field} is Required\", {\n        field: \"Iban number\"\n      };\n    } else if (!REGEX_PATTERNS.ACCOUNT_NUMBER.test(value)) {\n      return \"Iban number must be 24 charactor\";\n    }\n  }),\n  dateOfBirth: yup.date().max(moment().endOf(\"day\").subtract(18, \"years\"), \"Age Should be greather than 18\"),\n  withdrawAmount: yup.string() // .matches(/^[0-9]+$/gi, (\"You must specify a number\"))\n  .required((\"{field} is Required\", {\n    field: \"withdrawal amount\"\n  })),\n  depositAmount: yup.string() // .matches(/^[0-9]+$/gi, (\"You must specify a number\"))\n  .required((\"{field} is Required\", {\n    field: \"Deposit Amount\"\n  })),\n  destWalletAddress: yup.string().required((\"{field} is Required\", {\n    field: \"Destination Wallet\"\n  })),\n  withdrawCoinAmount: yup.string() // .matches(/^[0-9]+$/gi, (\"You must specify a number\"))\n  .required((\"{field} is Required\", {\n    field: \"Withdraw Amount\"\n  })),\n  walletName: yup.string().required((\"{field} is Required\", {\n    field: \"Wallet Name\"\n  })),\n  walletAddress: yup.string().required((\"{field} is Required\", {\n    field: \"Wallet Address\"\n  })),\n  tagMemo: yup.string().matches(/^[0-9]+$/gi, \"You must specify a number\").required((\"{field} is Required\", {\n    field: \"Tag Memo\"\n  })),\n  verificationCode: yup.string().matches(/^[0-9]+$/gi, \"You must specify a number\").typeError(\"You must specify a number\").required((\"{field} is Required\", {\n    field: \"google authunticator\"\n  })).min(6, \"Google authunticator code is too short - should be 6 chars minimum\"),\n  confirmCode: yup.string().typeError(\"You must specify a number\").required((\"{field} is Required\", {\n    field: \"google authunticator\"\n  })).min(6, \"Google authunticator code is too short - should be 6 chars minimum\"),\n  securityCode: yup.string().required((\"{field} is Required\", {\n    field: \"Security Code\"\n  })),\n  destTag: yup.string().required((\"{field} is Required\", {\n    field: \"Destination Tag\"\n  }))\n};\nexport default function getUserValidationSchema(arrayOfKeys) {\n  const keys = arrayOfKeys.length === 0 ? Object.keys(userSchemaObject) : arrayOfKeys;\n  const shape = keys.reduce((output, currentKey) => {\n    output[currentKey] = userSchemaObject[currentKey];\n    return output;\n  }, {});\n  return yup.object().shape(shape);\n}","map":{"version":3,"sources":["/home/ali/Desktop/react/ui-test/src/login/schema.js"],"names":["yup","userSchemaObject","password","string","required","field","min","email","matches","REGEX_PATTERNS","EMAIL","originalValue","value","test","token","totp","length","firstName","lastName","nationalCode","gender","phonenumber","accountNumber","ACCOUNT_NUMBER","IbanNumber","IBAN_NUMBER","dateOfBirth","date","max","moment","endOf","subtract","withdrawAmount","depositAmount","destWalletAddress","withdrawCoinAmount","walletName","walletAddress","tagMemo","verificationCode","typeError","confirmCode","securityCode","destTag","getUserValidationSchema","arrayOfKeys","keys","Object","shape","reduce","output","currentKey","object"],"mappings":"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","sourcesContent":["import * as yup from \"yup\";\n\nconst userSchemaObject = {\n  \n  password: yup\n    .string()\n    .required((\"{field} is Required\", { field: \"password\" }))\n    .min(8, \"Password is too short - should be 8 chars minimum\"),\n\n \n  email: yup\n    .string()\n    .matches(REGEX_PATTERNS.EMAIL, ({ originalValue, value }) => {\n      if (!!originalValue === false) {\n        return \"{field} is Required\", { field: \"email\" };\n      } else if (!REGEX_PATTERNS.EMAIL.test(value)) {\n        return \"Entered value is not correct\";\n      }\n    }),\n  token: yup\n    .string()\n    .required((\"{field} is Required\", { field: \"Verification code\" }))\n    .min(5, \"Verification code is too short - should be 5 chars minimum\"),\n  totp: yup\n    .string()\n    .required((\"{field} is Required\", { field: \"google authenticator\" }))\n    .length(6, \"Google authenticator should be 6 chars\")\n    .matches(/^[0-9]+$/gi, \"You must specify a number\"),\n  firstName: yup\n    .string()\n    .required((\"{field} is Required\", { field: \"First Name\" })),\n  lastName: yup\n    .string()\n    .required((\"{field} is Required\", { field: \"Last Name\" })),\n  nationalCode: yup.string(),\n  // .required((\"{field} is Required\", { field: (\"National Code\") }))\n  // .length(10, (\"National Code must be 10 charactor\"))\n  // .matches(/^[0-9]*$/gi, (\"Enter number only\")),\n\n  gender: yup.string().required((\"{field} is Required\", { field: \"gender\" })),\n  phonenumber: yup\n    .string()\n    .required((\"{field} is Required\", { field: \"phone number\" })),\n  accountNumber: yup\n    .string()\n    .matches(REGEX_PATTERNS.ACCOUNT_NUMBER, ({ originalValue, value }) => {\n      if (!!originalValue === false) {\n        return \"{field} is Required\", { field: \"account number\" };\n      } else if (!REGEX_PATTERNS.ACCOUNT_NUMBER.test(value)) {\n        return \"account number must be 16 charactor\";\n      }\n    }),\n  IbanNumber: yup\n    .string()\n    .matches(REGEX_PATTERNS.IBAN_NUMBER, ({ originalValue, value }) => {\n      if (!!originalValue === false) {\n        return \"{field} is Required\", { field: \"Iban number\" };\n      } else if (!REGEX_PATTERNS.ACCOUNT_NUMBER.test(value)) {\n        return \"Iban number must be 24 charactor\";\n      }\n    }),\n  dateOfBirth: yup\n    .date()\n    .max(\n      moment().endOf(\"day\").subtract(18, \"years\"),\n      \"Age Should be greather than 18\"\n    ),\n  withdrawAmount: yup\n    .string()\n    // .matches(/^[0-9]+$/gi, (\"You must specify a number\"))\n    .required((\"{field} is Required\", { field: \"withdrawal amount\" })),\n  depositAmount: yup\n    .string()\n    // .matches(/^[0-9]+$/gi, (\"You must specify a number\"))\n    .required((\"{field} is Required\", { field: \"Deposit Amount\" })),\n  destWalletAddress: yup\n    .string()\n    .required((\"{field} is Required\", { field: \"Destination Wallet\" })),\n  withdrawCoinAmount: yup\n    .string()\n    // .matches(/^[0-9]+$/gi, (\"You must specify a number\"))\n    .required((\"{field} is Required\", { field: \"Withdraw Amount\" })),\n\n  walletName: yup\n    .string()\n    .required((\"{field} is Required\", { field: \"Wallet Name\" })),\n  walletAddress: yup\n    .string()\n    .required((\"{field} is Required\", { field: \"Wallet Address\" })),\n  tagMemo: yup\n    .string()\n    .matches(/^[0-9]+$/gi, \"You must specify a number\")\n    .required((\"{field} is Required\", { field: \"Tag Memo\" })),\n  verificationCode: yup\n    .string()\n    .matches(/^[0-9]+$/gi, \"You must specify a number\")\n    .typeError(\"You must specify a number\")\n    .required((\"{field} is Required\", { field: \"google authunticator\" }))\n    .min(\n      6,\n      \"Google authunticator code is too short - should be 6 chars minimum\"\n    ),\n\n  confirmCode: yup\n    .string()\n    .typeError(\"You must specify a number\")\n    .required((\"{field} is Required\", { field: \"google authunticator\" }))\n    .min(\n      6,\n      \"Google authunticator code is too short - should be 6 chars minimum\"\n    ),\n  securityCode: yup\n    .string()\n    .required((\"{field} is Required\", { field: \"Security Code\" })),\n  destTag: yup\n    .string()\n    .required((\"{field} is Required\", { field: \"Destination Tag\" })),\n};\n\nexport default function getUserValidationSchema(arrayOfKeys) {\n  const keys =\n    arrayOfKeys.length === 0 ? Object.keys(userSchemaObject) : arrayOfKeys;\n\n  const shape = keys.reduce((output, currentKey) => {\n    output[currentKey] = userSchemaObject[currentKey];\n    return output;\n  }, {});\n\n  return yup.object().shape(shape);\n}\n"]},"metadata":{},"sourceType":"module"}