{"ast":null,"code":"import * as yup from \"yup\";\nconst userSchemaObject = {\n  oldPassword: yup.string().required(__t(\"{field} is Required\", {\n    field: __t(\"oldPassword\")\n  })).min(8, __t(\"Password is too short - should be 8 chars minimum\")),\n  password: yup.string().required(__t(\"{field} is Required\", {\n    field: __t(\"password\")\n  })).min(8, __t(\"Password is too short - should be 8 chars minimum\")),\n  repeatPassword: yup.string().required(__t(\"{field} is Required\", {\n    field: __t(\"Repeat Password\")\n  })).oneOf([yup.ref(\"password\"), null], __t(\"Passwords must match\")),\n  confirm: yup.string().required(__t(\"{field} is Required\", {\n    field: __t(\"Repeat Password\")\n  })).oneOf([yup.ref(\"password\"), null], __t(\"Passwords must match\")),\n  email: yup.string().matches(REGEX_PATTERNS.EMAIL, ({\n    originalValue,\n    value\n  }) => {\n    if (!!originalValue === false) {\n      return __t(\"{field} is Required\", {\n        field: __t(\"email\")\n      });\n    } else if (!REGEX_PATTERNS.EMAIL.test(value)) {\n      return __t(\"Entered value is not correct\");\n    }\n  }),\n  token: yup.string().required(__t(\"{field} is Required\", {\n    field: __t(\"Verification code\")\n  })).min(5, __t(\"Verification code is too short - should be 5 chars minimum\")),\n  totp: yup.string().required(__t(\"{field} is Required\", {\n    field: __t(\"google authenticator\")\n  })).length(6, __t(\"Google authenticator should be 6 chars\")).matches(/^[0-9]+$/gi, __t(\"You must specify a number\")),\n  firstName: yup.string().required(__t(\"{field} is Required\", {\n    field: __t(\"First Name\")\n  })),\n  lastName: yup.string().required(__t(\"{field} is Required\", {\n    field: __t(\"Last Name\")\n  })),\n  nationalCode: yup.string(),\n  // .required(__t(\"{field} is Required\", { field: __t(\"National Code\") }))\n  // .length(10, __t(\"National Code must be 10 charactor\"))\n  // .matches(/^[0-9]*$/gi, __t(\"Enter number only\")),\n  gender: yup.string().required(__t(\"{field} is Required\", {\n    field: __t(\"gender\")\n  })),\n  phonenumber: yup.string().required(__t(\"{field} is Required\", {\n    field: __t(\"phone number\")\n  })),\n  accountNumber: yup.string().matches(REGEX_PATTERNS.ACCOUNT_NUMBER, ({\n    originalValue,\n    value\n  }) => {\n    if (!!originalValue === false) {\n      return __t(\"{field} is Required\", {\n        field: __t(\"account number\")\n      });\n    } else if (!REGEX_PATTERNS.ACCOUNT_NUMBER.test(value)) {\n      return __t(\"account number must be 16 charactor\");\n    }\n  }),\n  IbanNumber: yup.string().matches(REGEX_PATTERNS.IBAN_NUMBER, ({\n    originalValue,\n    value\n  }) => {\n    if (!!originalValue === false) {\n      return __t(\"{field} is Required\", {\n        field: __t(\"Iban number\")\n      });\n    } else if (!REGEX_PATTERNS.ACCOUNT_NUMBER.test(value)) {\n      return __t(\"Iban number must be 24 charactor\");\n    }\n  }),\n  dateOfBirth: yup.date().max(moment().endOf(\"day\").subtract(18, \"years\"), __t(\"Age Should be greather than 18\")),\n  withdrawAmount: yup.string() // .matches(/^[0-9]+$/gi, __t(\"You must specify a number\"))\n  .required(__t(\"{field} is Required\", {\n    field: __t(\"withdrawal amount\")\n  })),\n  depositAmount: yup.string() // .matches(/^[0-9]+$/gi, __t(\"You must specify a number\"))\n  .required(__t(\"{field} is Required\", {\n    field: __t(\"Deposit Amount\")\n  })),\n  destWalletAddress: yup.string().required(__t(\"{field} is Required\", {\n    field: __t(\"Destination Wallet\")\n  })),\n  withdrawCoinAmount: yup.string() // .matches(/^[0-9]+$/gi, __t(\"You must specify a number\"))\n  .required(__t(\"{field} is Required\", {\n    field: __t(\"Withdraw Amount\")\n  })),\n  walletName: yup.string().required(__t(\"{field} is Required\", {\n    field: __t(\"Wallet Name\")\n  })),\n  walletAddress: yup.string().required(__t(\"{field} is Required\", {\n    field: __t(\"Wallet Address\")\n  })),\n  tagMemo: yup.string().matches(/^[0-9]+$/gi, __t(\"You must specify a number\")).required(__t(\"{field} is Required\", {\n    field: __t(\"Tag Memo\")\n  })),\n  verificationCode: yup.string().matches(/^[0-9]+$/gi, __t(\"You must specify a number\")).typeError(__t(\"You must specify a number\")).required(__t(\"{field} is Required\", {\n    field: __t(\"google authunticator\")\n  })).min(6, __t(\"Google authunticator code is too short - should be 6 chars minimum\")),\n  confirmCode: yup.string().typeError(__t(\"You must specify a number\")).required(__t(\"{field} is Required\", {\n    field: __t(\"google authunticator\")\n  })).min(6, __t(\"Google authunticator code is too short - should be 6 chars minimum\")),\n  securityCode: yup.string().required(__t(\"{field} is Required\", {\n    field: __t(\"Security Code\")\n  })),\n  destTag: yup.string().required(__t(\"{field} is Required\", {\n    field: __t(\"Destination Tag\")\n  }))\n};\nexport default function getUserValidationSchema(arrayOfKeys) {\n  const keys = arrayOfKeys.length === 0 ? Object.keys(userSchemaObject) : arrayOfKeys;\n  const shape = keys.reduce((output, currentKey) => {\n    output[currentKey] = userSchemaObject[currentKey];\n    return output;\n  }, {});\n  return yup.object().shape(shape);\n}","map":{"version":3,"sources":["/home/ali/Desktop/react/ui-test/src/login/schema.js"],"names":["yup","userSchemaObject","oldPassword","string","required","__t","field","min","password","repeatPassword","oneOf","ref","confirm","email","matches","REGEX_PATTERNS","EMAIL","originalValue","value","test","token","totp","length","firstName","lastName","nationalCode","gender","phonenumber","accountNumber","ACCOUNT_NUMBER","IbanNumber","IBAN_NUMBER","dateOfBirth","date","max","moment","endOf","subtract","withdrawAmount","depositAmount","destWalletAddress","withdrawCoinAmount","walletName","walletAddress","tagMemo","verificationCode","typeError","confirmCode","securityCode","destTag","getUserValidationSchema","arrayOfKeys","keys","Object","shape","reduce","output","currentKey","object"],"mappings":"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","sourcesContent":["import * as yup from \"yup\";\n\nconst userSchemaObject = {\n  oldPassword: yup\n    .string()\n    .required(__t(\"{field} is Required\", { field: __t(\"oldPassword\") }))\n    .min(8, __t(\"Password is too short - should be 8 chars minimum\")),\n\n  password: yup\n    .string()\n    .required(__t(\"{field} is Required\", { field: __t(\"password\") }))\n    .min(8, __t(\"Password is too short - should be 8 chars minimum\")),\n\n  repeatPassword: yup\n    .string()\n    .required(__t(\"{field} is Required\", { field: __t(\"Repeat Password\") }))\n    .oneOf([yup.ref(\"password\"), null], __t(\"Passwords must match\")),\n\n  confirm: yup\n    .string()\n    .required(__t(\"{field} is Required\", { field: __t(\"Repeat Password\") }))\n    .oneOf([yup.ref(\"password\"), null], __t(\"Passwords must match\")),\n\n  email: yup\n    .string()\n    .matches(REGEX_PATTERNS.EMAIL, ({ originalValue, value }) => {\n      if (!!originalValue === false) {\n        return __t(\"{field} is Required\", { field: __t(\"email\") });\n      } else if (!REGEX_PATTERNS.EMAIL.test(value)) {\n        return __t(\"Entered value is not correct\");\n      }\n    }),\n  token: yup\n    .string()\n    .required(__t(\"{field} is Required\", { field: __t(\"Verification code\") }))\n    .min(5, __t(\"Verification code is too short - should be 5 chars minimum\")),\n  totp: yup\n    .string()\n    .required(\n      __t(\"{field} is Required\", { field: __t(\"google authenticator\") })\n    )\n    .length(6, __t(\"Google authenticator should be 6 chars\"))\n    .matches(/^[0-9]+$/gi, __t(\"You must specify a number\")),\n  firstName: yup\n    .string()\n    .required(__t(\"{field} is Required\", { field: __t(\"First Name\") })),\n  lastName: yup\n    .string()\n    .required(__t(\"{field} is Required\", { field: __t(\"Last Name\") })),\n  nationalCode: yup.string(),\n  // .required(__t(\"{field} is Required\", { field: __t(\"National Code\") }))\n  // .length(10, __t(\"National Code must be 10 charactor\"))\n  // .matches(/^[0-9]*$/gi, __t(\"Enter number only\")),\n\n  gender: yup\n    .string()\n    .required(__t(\"{field} is Required\", { field: __t(\"gender\") })),\n  phonenumber: yup\n    .string()\n    .required(__t(\"{field} is Required\", { field: __t(\"phone number\") })),\n  accountNumber: yup\n    .string()\n    .matches(REGEX_PATTERNS.ACCOUNT_NUMBER, ({ originalValue, value }) => {\n      if (!!originalValue === false) {\n        return __t(\"{field} is Required\", { field: __t(\"account number\") });\n      } else if (!REGEX_PATTERNS.ACCOUNT_NUMBER.test(value)) {\n        return __t(\"account number must be 16 charactor\");\n      }\n    }),\n  IbanNumber: yup\n    .string()\n    .matches(REGEX_PATTERNS.IBAN_NUMBER, ({ originalValue, value }) => {\n      if (!!originalValue === false) {\n        return __t(\"{field} is Required\", { field: __t(\"Iban number\") });\n      } else if (!REGEX_PATTERNS.ACCOUNT_NUMBER.test(value)) {\n        return __t(\"Iban number must be 24 charactor\");\n      }\n    }),\n  dateOfBirth: yup\n    .date()\n    .max(\n      moment().endOf(\"day\").subtract(18, \"years\"),\n      __t(\"Age Should be greather than 18\")\n    ),\n  withdrawAmount: yup\n    .string()\n    // .matches(/^[0-9]+$/gi, __t(\"You must specify a number\"))\n    .required(__t(\"{field} is Required\", { field: __t(\"withdrawal amount\") })),\n  depositAmount: yup\n    .string()\n    // .matches(/^[0-9]+$/gi, __t(\"You must specify a number\"))\n    .required(__t(\"{field} is Required\", { field: __t(\"Deposit Amount\") })),\n  destWalletAddress: yup\n    .string()\n    .required(__t(\"{field} is Required\", { field: __t(\"Destination Wallet\") })),\n  withdrawCoinAmount: yup\n    .string()\n    // .matches(/^[0-9]+$/gi, __t(\"You must specify a number\"))\n    .required(__t(\"{field} is Required\", { field: __t(\"Withdraw Amount\") })),\n\n  walletName: yup\n    .string()\n    .required(__t(\"{field} is Required\", { field: __t(\"Wallet Name\") })),\n  walletAddress: yup\n    .string()\n    .required(__t(\"{field} is Required\", { field: __t(\"Wallet Address\") })),\n  tagMemo: yup\n    .string()\n    .matches(/^[0-9]+$/gi, __t(\"You must specify a number\"))\n    .required(__t(\"{field} is Required\", { field: __t(\"Tag Memo\") })),\n  verificationCode: yup\n    .string()\n    .matches(/^[0-9]+$/gi, __t(\"You must specify a number\"))\n    .typeError(__t(\"You must specify a number\"))\n    .required(\n      __t(\"{field} is Required\", { field: __t(\"google authunticator\") })\n    )\n    .min(\n      6,\n      __t(\"Google authunticator code is too short - should be 6 chars minimum\")\n    ),\n\n  confirmCode: yup\n    .string()\n    .typeError(__t(\"You must specify a number\"))\n    .required(\n      __t(\"{field} is Required\", { field: __t(\"google authunticator\") })\n    )\n    .min(\n      6,\n      __t(\"Google authunticator code is too short - should be 6 chars minimum\")\n    ),\n  securityCode: yup\n    .string()\n    .required(__t(\"{field} is Required\", { field: __t(\"Security Code\") })),\n  destTag: yup\n    .string()\n    .required(__t(\"{field} is Required\", { field: __t(\"Destination Tag\") }))\n};\n\nexport default function getUserValidationSchema(arrayOfKeys) {\n  const keys =\n    arrayOfKeys.length === 0 ? Object.keys(userSchemaObject) : arrayOfKeys;\n\n  const shape = keys.reduce((output, currentKey) => {\n    output[currentKey] = userSchemaObject[currentKey];\n    return output;\n  }, {});\n\n  return yup.object().shape(shape);\n}\n"]},"metadata":{},"sourceType":"module"}