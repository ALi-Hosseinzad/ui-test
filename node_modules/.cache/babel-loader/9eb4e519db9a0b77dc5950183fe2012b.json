{"ast":null,"code":"import axios from \"axios\";\nimport { trackPromise } from \"react-promise-tracker\";\nimport { clearCache, getCachedData } from \"./cookieManager\";\nexport const BASE_URL = \"http://157.119.191.43:18089/\"; // !process.env.NODE_ENV || process.env.NODE_ENV === \"development\"\n//   ? \"http://157.119.191.43:8080/\"\n//   : \"\";\n\nexport const METHOD = {\n  GET: \"get\",\n  HEAD: \"HEAD\",\n  PUT: \"PUT\",\n  DELETE: \"DELETE\",\n  PATCH: \"PATCH\",\n  POST: \"POST\"\n};\nconst singleton = Symbol();\nconst singletonEnforcer = Symbol();\nconst defaultOptions = {\n  baseURL: BASE_URL,\n  method: METHOD.GET,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n};\n\nclass ApiService {\n  constructor(enforcer) {\n    this.get = (url, options = {}) => trackPromise(this.session.get(url, { ...defaultOptions,\n      ...options\n    }));\n\n    this.post = (url, data, options = {}) => trackPromise(this.session.post(url, data, { ...defaultOptions,\n      ...options\n    }));\n\n    this.put = (url, data, options = {}) => trackPromise(this.session.put(url, data, { ...defaultOptions,\n      ...options\n    }));\n\n    this.patch = (url, data, options = {}) => trackPromise(this.session.patch(url, data, { ...defaultOptions,\n      ...options\n    }));\n\n    this.delete = (url, options = {}) => trackPromise(this.session.delete(url, { ...defaultOptions,\n      ...options\n    }));\n\n    this.remove = (...params) => this.session.delete(...params);\n\n    if (enforcer !== singletonEnforcer) {\n      throw new Error(\"Cannot construct singleton\");\n    }\n\n    const _defaultOptions = {\n      baseURL: BASE_URL,\n      method: METHOD.GET,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    this.session = axios.create(_defaultOptions);\n    this.session.interceptors.request.use(config => {\n      const token = getCachedData(\"access_token\");\n\n      if (!!token) {\n        config.headers[\"Authorization\"] = `Bearer ${token}`;\n      }\n\n      config.params = Object.assign({}, (config === null || config === void 0 ? void 0 : config.params) || {});\n      return config;\n    });\n    this.session.interceptors.response.use(response => {\n      return response.data;\n    }, error => {\n      if (error.response && error.response.status === 401) {\n        clearCache(\"access_token\");\n      } // handle the response error\n\n\n      return Promise.reject(error === null || error === void 0 ? void 0 : error.response);\n    });\n  }\n\n  static get instance() {\n    if (!this[singleton]) {\n      this[singleton] = new ApiService(singletonEnforcer);\n    }\n\n    return this[singleton];\n  }\n\n}\n\nexport default ApiService.instance;","map":{"version":3,"sources":["/home/ali/Desktop/react/ui-test/src/client/client.js"],"names":["axios","trackPromise","clearCache","getCachedData","BASE_URL","METHOD","GET","HEAD","PUT","DELETE","PATCH","POST","singleton","Symbol","singletonEnforcer","defaultOptions","baseURL","method","headers","ApiService","constructor","enforcer","get","url","options","session","post","data","put","patch","delete","remove","params","Error","create","interceptors","request","use","config","token","Object","assign","response","error","status","Promise","reject","instance"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { trackPromise } from \"react-promise-tracker\";\nimport { clearCache, getCachedData } from \"./cookieManager\";\n\nexport const BASE_URL = \"http://157.119.191.43:18089/\";\n// !process.env.NODE_ENV || process.env.NODE_ENV === \"development\"\n//   ? \"http://157.119.191.43:8080/\"\n//   : \"\";\n\nexport const METHOD = {\n  GET: \"get\",\n  HEAD: \"HEAD\",\n  PUT: \"PUT\",\n  DELETE: \"DELETE\",\n  PATCH: \"PATCH\",\n  POST: \"POST\",\n};\n\nconst singleton = Symbol();\nconst singletonEnforcer = Symbol();\n\nconst defaultOptions = {\n  baseURL: BASE_URL,\n  method: METHOD.GET,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n};\n\nclass ApiService {\n  constructor(enforcer) {\n    if (enforcer !== singletonEnforcer) {\n      throw new Error(\"Cannot construct singleton\");\n    }\n    const defaultOptions = {\n      baseURL: BASE_URL,\n      method: METHOD.GET,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    this.session = axios.create(defaultOptions);\n\n    this.session.interceptors.request.use((config) => {\n      const token = getCachedData(\"access_token\");\n      if (!!token) {\n        config.headers[\"Authorization\"] = `Bearer ${token}`;\n      }\n\n      config.params = Object.assign({}, config?.params || {});\n\n      return config;\n    });\n\n    this.session.interceptors.response.use(\n      (response) => {\n        return response.data;\n      },\n      (error) => {\n        if (error.response && error.response.status === 401) {\n          clearCache(\"access_token\");\n        }\n        // handle the response error\n        return Promise.reject(error?.response);\n      }\n    );\n  }\n\n  static get instance() {\n    if (!this[singleton]) {\n      this[singleton] = new ApiService(singletonEnforcer);\n    }\n\n    return this[singleton];\n  }\n\n  get = (url, options = {}) =>\n    trackPromise(this.session.get(url, { ...defaultOptions, ...options }));\n\n  post = (url, data, options = {}) =>\n    trackPromise(\n      this.session.post(url, data, { ...defaultOptions, ...options })\n    );\n\n  put = (url, data, options = {}) =>\n    trackPromise(\n      this.session.put(url, data, { ...defaultOptions, ...options })\n    );\n\n  patch = (url, data, options = {}) =>\n    trackPromise(\n      this.session.patch(url, data, { ...defaultOptions, ...options })\n    );\n  delete = (url, options = {}) =>\n    trackPromise(this.session.delete(url, { ...defaultOptions, ...options }));\n  remove = (...params) => this.session.delete(...params);\n}\n\nexport default ApiService.instance;\n"]},"metadata":{},"sourceType":"module"}