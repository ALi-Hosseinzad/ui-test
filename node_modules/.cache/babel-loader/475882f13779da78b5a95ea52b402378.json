{"ast":null,"code":"import * as yup from \"yup\";\nconst userSchemaObject = {\n  oldPassword: yup.string().required((\"{field} is Required\", {\n    field: \"oldPassword\"\n  })).min(8, \"Password is too short - should be 8 chars minimum\"),\n  password: yup.string().required((\"{field} is Required\", {\n    field: \"password\"\n  })).min(8, \"Password is too short - should be 8 chars minimum\"),\n  repeatPassword: yup.string().required((\"{field} is Required\", {\n    field: \"Repeat Password\"\n  })).oneOf([yup.ref(\"password\"), null], \"Passwords must match\"),\n  confirm: yup.string().required((\"{field} is Required\", {\n    field: \"Repeat Password\"\n  })).oneOf([yup.ref(\"password\"), null], \"Passwords must match\"),\n  email: yup.string().matches(REGEX_PATTERNS.EMAIL, ({\n    originalValue,\n    value\n  }) => {\n    if (!!originalValue === false) {\n      return \"{field} is Required\", {\n        field: \"email\"\n      };\n    } else if (!REGEX_PATTERNS.EMAIL.test(value)) {\n      return \"Entered value is not correct\";\n    }\n  }),\n  token: yup.string().required((\"{field} is Required\", {\n    field: \"Verification code\"\n  })).min(5, \"Verification code is too short - should be 5 chars minimum\"),\n  totp: yup.string().required((\"{field} is Required\", {\n    field: \"google authenticator\"\n  })).length(6, \"Google authenticator should be 6 chars\").matches(/^[0-9]+$/gi, \"You must specify a number\"),\n  firstName: yup.string().required((\"{field} is Required\", {\n    field: \"First Name\"\n  })),\n  lastName: yup.string().required((\"{field} is Required\", {\n    field: \"Last Name\"\n  })),\n  nationalCode: yup.string(),\n  // .required((\"{field} is Required\", { field: (\"National Code\") }))\n  // .length(10, (\"National Code must be 10 charactor\"))\n  // .matches(/^[0-9]*$/gi, (\"Enter number only\")),\n  gender: yup.string().required((\"{field} is Required\", {\n    field: \"gender\"\n  })),\n  phonenumber: yup.string().required((\"{field} is Required\", {\n    field: \"phone number\"\n  })),\n  accountNumber: yup.string().matches(REGEX_PATTERNS.ACCOUNT_NUMBER, ({\n    originalValue,\n    value\n  }) => {\n    if (!!originalValue === false) {\n      return \"{field} is Required\", {\n        field: \"account number\"\n      };\n    } else if (!REGEX_PATTERNS.ACCOUNT_NUMBER.test(value)) {\n      return \"account number must be 16 charactor\";\n    }\n  }),\n  IbanNumber: yup.string().matches(REGEX_PATTERNS.IBAN_NUMBER, ({\n    originalValue,\n    value\n  }) => {\n    if (!!originalValue === false) {\n      return \"{field} is Required\", {\n        field: \"Iban number\"\n      };\n    } else if (!REGEX_PATTERNS.ACCOUNT_NUMBER.test(value)) {\n      return \"Iban number must be 24 charactor\";\n    }\n  }),\n  dateOfBirth: yup.date().max(moment().endOf(\"day\").subtract(18, \"years\"), \"Age Should be greather than 18\"),\n  withdrawAmount: yup.string() // .matches(/^[0-9]+$/gi, (\"You must specify a number\"))\n  .required((\"{field} is Required\", {\n    field: \"withdrawal amount\"\n  })),\n  depositAmount: yup.string() // .matches(/^[0-9]+$/gi, (\"You must specify a number\"))\n  .required((\"{field} is Required\", {\n    field: \"Deposit Amount\"\n  })),\n  destWalletAddress: yup.string().required((\"{field} is Required\", {\n    field: \"Destination Wallet\"\n  })),\n  withdrawCoinAmount: yup.string() // .matches(/^[0-9]+$/gi, (\"You must specify a number\"))\n  .required((\"{field} is Required\", {\n    field: \"Withdraw Amount\"\n  })),\n  walletName: yup.string().required((\"{field} is Required\", {\n    field: \"Wallet Name\"\n  })),\n  walletAddress: yup.string().required((\"{field} is Required\", {\n    field: \"Wallet Address\"\n  })),\n  tagMemo: yup.string().matches(/^[0-9]+$/gi, \"You must specify a number\").required((\"{field} is Required\", {\n    field: \"Tag Memo\"\n  })),\n  verificationCode: yup.string().matches(/^[0-9]+$/gi, \"You must specify a number\").typeError(\"You must specify a number\").required((\"{field} is Required\", {\n    field: \"google authunticator\"\n  })).min(6, \"Google authunticator code is too short - should be 6 chars minimum\"),\n  confirmCode: yup.string().typeError(\"You must specify a number\").required((\"{field} is Required\", {\n    field: \"google authunticator\"\n  })).min(6, \"Google authunticator code is too short - should be 6 chars minimum\"),\n  securityCode: yup.string().required((\"{field} is Required\", {\n    field: \"Security Code\"\n  })),\n  destTag: yup.string().required((\"{field} is Required\", {\n    field: \"Destination Tag\"\n  }))\n};\nexport default function getUserValidationSchema(arrayOfKeys) {\n  const keys = arrayOfKeys.length === 0 ? Object.keys(userSchemaObject) : arrayOfKeys;\n  const shape = keys.reduce((output, currentKey) => {\n    output[currentKey] = userSchemaObject[currentKey];\n    return output;\n  }, {});\n  return yup.object().shape(shape);\n}","map":{"version":3,"sources":["/home/ali/Desktop/react/ui-test/src/login/schema.js"],"names":["yup","userSchemaObject","oldPassword","string","required","field","min","password","repeatPassword","oneOf","ref","confirm","email","matches","REGEX_PATTERNS","EMAIL","originalValue","value","test","token","totp","length","firstName","lastName","nationalCode","gender","phonenumber","accountNumber","ACCOUNT_NUMBER","IbanNumber","IBAN_NUMBER","dateOfBirth","date","max","moment","endOf","subtract","withdrawAmount","depositAmount","destWalletAddress","withdrawCoinAmount","walletName","walletAddress","tagMemo","verificationCode","typeError","confirmCode","securityCode","destTag","getUserValidationSchema","arrayOfKeys","keys","Object","shape","reduce","output","currentKey","object"],"mappings":"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","sourcesContent":["import * as yup from \"yup\";\n\nconst userSchemaObject = {\n  oldPassword: yup\n    .string()\n    .required((\"{field} is Required\", { field: (\"oldPassword\") }))\n    .min(8, (\"Password is too short - should be 8 chars minimum\")),\n\n  password: yup\n    .string()\n    .required((\"{field} is Required\", { field: (\"password\") }))\n    .min(8, (\"Password is too short - should be 8 chars minimum\")),\n\n  repeatPassword: yup\n    .string()\n    .required((\"{field} is Required\", { field: (\"Repeat Password\") }))\n    .oneOf([yup.ref(\"password\"), null], (\"Passwords must match\")),\n\n  confirm: yup\n    .string()\n    .required((\"{field} is Required\", { field: (\"Repeat Password\") }))\n    .oneOf([yup.ref(\"password\"), null], (\"Passwords must match\")),\n\n  email: yup\n    .string()\n    .matches(REGEX_PATTERNS.EMAIL, ({ originalValue, value }) => {\n      if (!!originalValue === false) {\n        return (\"{field} is Required\", { field: (\"email\") });\n      } else if (!REGEX_PATTERNS.EMAIL.test(value)) {\n        return (\"Entered value is not correct\");\n      }\n    }),\n  token: yup\n    .string()\n    .required((\"{field} is Required\", { field: (\"Verification code\") }))\n    .min(5, (\"Verification code is too short - should be 5 chars minimum\")),\n  totp: yup\n    .string()\n    .required(\n      (\"{field} is Required\", { field: (\"google authenticator\") })\n    )\n    .length(6, (\"Google authenticator should be 6 chars\"))\n    .matches(/^[0-9]+$/gi, (\"You must specify a number\")),\n  firstName: yup\n    .string()\n    .required((\"{field} is Required\", { field: (\"First Name\") })),\n  lastName: yup\n    .string()\n    .required((\"{field} is Required\", { field: (\"Last Name\") })),\n  nationalCode: yup.string(),\n  // .required((\"{field} is Required\", { field: (\"National Code\") }))\n  // .length(10, (\"National Code must be 10 charactor\"))\n  // .matches(/^[0-9]*$/gi, (\"Enter number only\")),\n\n  gender: yup\n    .string()\n    .required((\"{field} is Required\", { field: (\"gender\") })),\n  phonenumber: yup\n    .string()\n    .required((\"{field} is Required\", { field: (\"phone number\") })),\n  accountNumber: yup\n    .string()\n    .matches(REGEX_PATTERNS.ACCOUNT_NUMBER, ({ originalValue, value }) => {\n      if (!!originalValue === false) {\n        return (\"{field} is Required\", { field: (\"account number\") });\n      } else if (!REGEX_PATTERNS.ACCOUNT_NUMBER.test(value)) {\n        return (\"account number must be 16 charactor\");\n      }\n    }),\n  IbanNumber: yup\n    .string()\n    .matches(REGEX_PATTERNS.IBAN_NUMBER, ({ originalValue, value }) => {\n      if (!!originalValue === false) {\n        return (\"{field} is Required\", { field: (\"Iban number\") });\n      } else if (!REGEX_PATTERNS.ACCOUNT_NUMBER.test(value)) {\n        return (\"Iban number must be 24 charactor\");\n      }\n    }),\n  dateOfBirth: yup\n    .date()\n    .max(\n      moment().endOf(\"day\").subtract(18, \"years\"),\n      (\"Age Should be greather than 18\")\n    ),\n  withdrawAmount: yup\n    .string()\n    // .matches(/^[0-9]+$/gi, (\"You must specify a number\"))\n    .required((\"{field} is Required\", { field: (\"withdrawal amount\") })),\n  depositAmount: yup\n    .string()\n    // .matches(/^[0-9]+$/gi, (\"You must specify a number\"))\n    .required((\"{field} is Required\", { field: (\"Deposit Amount\") })),\n  destWalletAddress: yup\n    .string()\n    .required((\"{field} is Required\", { field: (\"Destination Wallet\") })),\n  withdrawCoinAmount: yup\n    .string()\n    // .matches(/^[0-9]+$/gi, (\"You must specify a number\"))\n    .required((\"{field} is Required\", { field: (\"Withdraw Amount\") })),\n\n  walletName: yup\n    .string()\n    .required((\"{field} is Required\", { field: (\"Wallet Name\") })),\n  walletAddress: yup\n    .string()\n    .required((\"{field} is Required\", { field: (\"Wallet Address\") })),\n  tagMemo: yup\n    .string()\n    .matches(/^[0-9]+$/gi, (\"You must specify a number\"))\n    .required((\"{field} is Required\", { field: (\"Tag Memo\") })),\n  verificationCode: yup\n    .string()\n    .matches(/^[0-9]+$/gi, (\"You must specify a number\"))\n    .typeError((\"You must specify a number\"))\n    .required(\n      (\"{field} is Required\", { field: (\"google authunticator\") })\n    )\n    .min(\n      6,\n      (\"Google authunticator code is too short - should be 6 chars minimum\")\n    ),\n\n  confirmCode: yup\n    .string()\n    .typeError((\"You must specify a number\"))\n    .required(\n      (\"{field} is Required\", { field: (\"google authunticator\") })\n    )\n    .min(\n      6,\n      (\"Google authunticator code is too short - should be 6 chars minimum\")\n    ),\n  securityCode: yup\n    .string()\n    .required((\"{field} is Required\", { field: (\"Security Code\") })),\n  destTag: yup\n    .string()\n    .required((\"{field} is Required\", { field: (\"Destination Tag\") }))\n};\n\nexport default function getUserValidationSchema(arrayOfKeys) {\n  const keys =\n    arrayOfKeys.length === 0 ? Object.keys(userSchemaObject) : arrayOfKeys;\n\n  const shape = keys.reduce((output, currentKey) => {\n    output[currentKey] = userSchemaObject[currentKey];\n    return output;\n  }, {});\n\n  return yup.object().shape(shape);\n}\n"]},"metadata":{},"sourceType":"module"}