{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.destroyCookie = exports.setCookie = exports.parseCookies = void 0;\n\nvar cookie = require(\"cookie\");\n\nvar setCookieParser = require(\"set-cookie-parser\");\n\nvar utils_1 = require(\"./utils\");\n/**\n * Parses cookies.\n *\n * @param ctx NextJS page or API context, express context, null or undefined.\n * @param options Options that we pass down to `cookie` library.\n */\n\n\nfunction parseCookies(ctx, options) {\n  var _a, _b;\n\n  if ((_b = (_a = ctx === null || ctx === void 0 ? void 0 : ctx.req) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b.cookie) {\n    return cookie.parse(ctx.req.headers.cookie, options);\n  }\n\n  if (utils_1.isBrowser()) {\n    return cookie.parse(document.cookie, options);\n  }\n\n  return {};\n}\n\nexports.parseCookies = parseCookies;\n/**\n * Sets a cookie.\n *\n * @param ctx NextJS page or API context, express context, null or undefined.\n * @param name The name of your cookie.\n * @param value The value of your cookie.\n * @param options Options that we pass down to `cookie` library.\n */\n\nfunction setCookie(ctx, name, value, options) {\n  var _a, _b;\n\n  if (options === void 0) {\n    options = {};\n  } // SSR\n\n\n  if (((_a = ctx === null || ctx === void 0 ? void 0 : ctx.res) === null || _a === void 0 ? void 0 : _a.getHeader) && ctx.res.setHeader) {\n    // Check if response has finished and warn about it.\n    if ((_b = ctx === null || ctx === void 0 ? void 0 : ctx.res) === null || _b === void 0 ? void 0 : _b.finished) {\n      console.warn(\"Not setting \\\"\" + name + \"\\\" cookie. Response has finished.\");\n      console.warn(\"You should set cookie before res.send()\");\n      return {};\n    }\n    /**\n     * Load existing cookies from the header and parse them.\n     */\n\n\n    var cookies = ctx.res.getHeader('Set-Cookie') || [];\n    if (typeof cookies === 'string') cookies = [cookies];\n    if (typeof cookies === 'number') cookies = [];\n    /**\n     * Parse cookies but ignore values - we've already encoded\n     * them in the previous call.\n     */\n\n    var parsedCookies = setCookieParser.parse(cookies, {\n      decodeValues: false\n    });\n    /**\n     * We create the new cookie and make sure that none of\n     * the existing cookies match it.\n     */\n\n    var newCookie_1 = utils_1.createCookie(name, value, options);\n    var cookiesToSet_1 = [];\n    parsedCookies.forEach(function (parsedCookie) {\n      if (!utils_1.areCookiesEqual(parsedCookie, newCookie_1)) {\n        /**\n         * We serialize the cookie back to the original format\n         * if it isn't the same as the new one.\n         */\n        var serializedCookie = cookie.serialize(parsedCookie.name, parsedCookie.value, __assign({\n          // we prevent reencoding by default, but you might override it\n          encode: function (val) {\n            return val;\n          }\n        }, parsedCookie));\n        cookiesToSet_1.push(serializedCookie);\n      }\n    });\n    cookiesToSet_1.push(cookie.serialize(name, value, options)); // Update the header.\n\n    ctx.res.setHeader('Set-Cookie', cookiesToSet_1);\n  } // Browser\n\n\n  if (utils_1.isBrowser()) {\n    if (options && options.httpOnly) {\n      throw new Error('Can not set a httpOnly cookie in the browser.');\n    }\n\n    document.cookie = cookie.serialize(name, value, options);\n  }\n\n  return {};\n}\n\nexports.setCookie = setCookie;\n/**\n * Destroys a cookie with a particular name.\n *\n * @param ctx NextJS page or API context, express context, null or undefined.\n * @param name Cookie name.\n * @param options Options that we pass down to `cookie` library.\n */\n\nfunction destroyCookie(ctx, name, options) {\n  /**\n   * We forward the request destroy to setCookie function\n   * as it is the same function with modified maxAge value.\n   */\n  return setCookie(ctx, name, '', __assign(__assign({}, options || {}), {\n    maxAge: -1\n  }));\n}\n\nexports.destroyCookie = destroyCookie;\n/* Utility Exports */\n\nexports.default = {\n  set: setCookie,\n  get: parseCookies,\n  destroy: destroyCookie\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAGA,IAAA,eAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAGA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAEA;;;;;AAKG;;;AACH,SAAgB,YAAhB,CACE,GADF,EAOE,OAPF,EAOqC;;;AAEnC,MAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAI,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAG,KAAA,CAAH,GAAA,GAAG,CAAE,GAAT,MAAY,IAAZ,IAAY,EAAA,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAE,OAAd,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,KAAA,CAArB,GAAqB,EAAA,CAAE,MAAvB,EAA+B;AAC7B,WAAO,MAAM,CAAC,KAAP,CAAa,GAAG,CAAC,GAAJ,CAAQ,OAAR,CAAgB,MAA7B,EAA+C,OAA/C,CAAP;AACD;;AAED,MAAI,OAAA,CAAA,SAAA,EAAJ,EAAiB;AACf,WAAO,MAAM,CAAC,KAAP,CAAa,QAAQ,CAAC,MAAtB,EAA8B,OAA9B,CAAP;AACD;;AAED,SAAO,EAAP;AACD;;AAlBD,OAAA,CAAA,YAAA,GAAA,YAAA;AAoBA;;;;;;;AAOG;;AACH,SAAgB,SAAhB,CACE,GADF,EAOE,IAPF,EAQE,KARF,EASE,OATF,EAS6C;;;AAA3C,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAA2C,GAAA,CAE3C;;;AACA,MAAI,CAAA,CAAA,EAAA,GAAA,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAG,KAAA,CAAH,GAAA,GAAG,CAAE,GAAL,MAAQ,IAAR,IAAQ,EAAA,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAQ,EAAA,CAAE,SAAV,KAAuB,GAAG,CAAC,GAAJ,CAAQ,SAAnC,EAA8C;AAC5C;AACA,QAAA,CAAA,EAAA,GAAI,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAG,KAAA,CAAH,GAAA,GAAG,CAAE,GAAT,MAAY,IAAZ,IAAY,EAAA,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAE,QAAd,EAAwB;AACtB,MAAA,OAAO,CAAC,IAAR,CAAa,mBAAgB,IAAhB,GAAoB,mCAAjC;AACA,MAAA,OAAO,CAAC,IAAR,CAAa,yCAAb;AACA,aAAO,EAAP;AACD;AAED;;AAEG;;;AACH,QAAI,OAAO,GAAG,GAAG,CAAC,GAAJ,CAAQ,SAAR,CAAkB,YAAlB,KAAmC,EAAjD;AAEA,QAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC,OAAO,GAAG,CAAC,OAAD,CAAV;AACjC,QAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC,OAAO,GAAG,EAAV;AAEjC;;;AAGG;;AACH,QAAM,aAAa,GAAG,eAAe,CAAC,KAAhB,CAAsB,OAAtB,EAA+B;AACnD,MAAA,YAAY,EAAE;AADqC,KAA/B,CAAtB;AAIA;;;AAGG;;AACH,QAAM,WAAS,GAAG,OAAA,CAAA,YAAA,CAAa,IAAb,EAAmB,KAAnB,EAA0B,OAA1B,CAAlB;AACA,QAAI,cAAY,GAAa,EAA7B;AAEA,IAAA,aAAa,CAAC,OAAd,CAAsB,UAAC,YAAD,EAAqB;AACzC,UAAI,CAAC,OAAA,CAAA,eAAA,CAAgB,YAAhB,EAA8B,WAA9B,CAAL,EAA+C;AAC7C;;;AAGG;AACH,YAAM,gBAAgB,GAAG,MAAM,CAAC,SAAP,CACvB,YAAY,CAAC,IADU,EAEvB,YAAY,CAAC,KAFU,EAEL,QAAA,CAAA;AAEhB;AACA,UAAA,MAAM,EAAE,UAAC,GAAD,EAAY;AAAK,mBAAA,GAAA;AAAG;AAHZ,SAAA,EAIZ,YAJY,CAFK,CAAzB;AAUA,QAAA,cAAY,CAAC,IAAb,CAAkB,gBAAlB;AACD;AACF,KAlBD;AAmBA,IAAA,cAAY,CAAC,IAAb,CAAkB,MAAM,CAAC,SAAP,CAAiB,IAAjB,EAAuB,KAAvB,EAA8B,OAA9B,CAAlB,EAlD4C,CAoD5C;;AACA,IAAA,GAAG,CAAC,GAAJ,CAAQ,SAAR,CAAkB,YAAlB,EAAgC,cAAhC;AACD,GAzD0C,CA2D3C;;;AACA,MAAI,OAAA,CAAA,SAAA,EAAJ,EAAiB;AACf,QAAI,OAAO,IAAI,OAAO,CAAC,QAAvB,EAAiC;AAC/B,YAAM,IAAI,KAAJ,CAAU,+CAAV,CAAN;AACD;;AAED,IAAA,QAAQ,CAAC,MAAT,GAAkB,MAAM,CAAC,SAAP,CAAiB,IAAjB,EAAuB,KAAvB,EAA8B,OAA9B,CAAlB;AACD;;AAED,SAAO,EAAP;AACD;;AA9ED,OAAA,CAAA,SAAA,GAAA,SAAA;AAgFA;;;;;;AAMG;;AACH,SAAgB,aAAhB,CACE,GADF,EAOE,IAPF,EAQE,OARF,EAQyC;AAEvC;;;AAGG;AACH,SAAO,SAAS,CAAC,GAAD,EAAM,IAAN,EAAY,EAAZ,EAAc,QAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,OAAO,IAAI,EAAnB,CAAA,EAAsB;AAAE,IAAA,MAAM,EAAE,CAAC;AAAX,GAAtB,CAAd,CAAhB;AACD;;AAfD,OAAA,CAAA,aAAA,GAAA,aAAA;AAiBA;;AAEA,OAAA,CAAA,OAAA,GAAe;AACb,EAAA,GAAG,EAAE,SADQ;AAEb,EAAA,GAAG,EAAE,YAFQ;AAGb,EAAA,OAAO,EAAE;AAHI,CAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.destroyCookie = exports.setCookie = exports.parseCookies = void 0;\nvar cookie = require(\"cookie\");\nvar setCookieParser = require(\"set-cookie-parser\");\nvar utils_1 = require(\"./utils\");\n/**\n * Parses cookies.\n *\n * @param ctx NextJS page or API context, express context, null or undefined.\n * @param options Options that we pass down to `cookie` library.\n */\nfunction parseCookies(ctx, options) {\n    var _a, _b;\n    if ((_b = (_a = ctx === null || ctx === void 0 ? void 0 : ctx.req) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b.cookie) {\n        return cookie.parse(ctx.req.headers.cookie, options);\n    }\n    if (utils_1.isBrowser()) {\n        return cookie.parse(document.cookie, options);\n    }\n    return {};\n}\nexports.parseCookies = parseCookies;\n/**\n * Sets a cookie.\n *\n * @param ctx NextJS page or API context, express context, null or undefined.\n * @param name The name of your cookie.\n * @param value The value of your cookie.\n * @param options Options that we pass down to `cookie` library.\n */\nfunction setCookie(ctx, name, value, options) {\n    var _a, _b;\n    if (options === void 0) { options = {}; }\n    // SSR\n    if (((_a = ctx === null || ctx === void 0 ? void 0 : ctx.res) === null || _a === void 0 ? void 0 : _a.getHeader) && ctx.res.setHeader) {\n        // Check if response has finished and warn about it.\n        if ((_b = ctx === null || ctx === void 0 ? void 0 : ctx.res) === null || _b === void 0 ? void 0 : _b.finished) {\n            console.warn(\"Not setting \\\"\" + name + \"\\\" cookie. Response has finished.\");\n            console.warn(\"You should set cookie before res.send()\");\n            return {};\n        }\n        /**\n         * Load existing cookies from the header and parse them.\n         */\n        var cookies = ctx.res.getHeader('Set-Cookie') || [];\n        if (typeof cookies === 'string')\n            cookies = [cookies];\n        if (typeof cookies === 'number')\n            cookies = [];\n        /**\n         * Parse cookies but ignore values - we've already encoded\n         * them in the previous call.\n         */\n        var parsedCookies = setCookieParser.parse(cookies, {\n            decodeValues: false,\n        });\n        /**\n         * We create the new cookie and make sure that none of\n         * the existing cookies match it.\n         */\n        var newCookie_1 = utils_1.createCookie(name, value, options);\n        var cookiesToSet_1 = [];\n        parsedCookies.forEach(function (parsedCookie) {\n            if (!utils_1.areCookiesEqual(parsedCookie, newCookie_1)) {\n                /**\n                 * We serialize the cookie back to the original format\n                 * if it isn't the same as the new one.\n                 */\n                var serializedCookie = cookie.serialize(parsedCookie.name, parsedCookie.value, __assign({ \n                    // we prevent reencoding by default, but you might override it\n                    encode: function (val) { return val; } }, parsedCookie));\n                cookiesToSet_1.push(serializedCookie);\n            }\n        });\n        cookiesToSet_1.push(cookie.serialize(name, value, options));\n        // Update the header.\n        ctx.res.setHeader('Set-Cookie', cookiesToSet_1);\n    }\n    // Browser\n    if (utils_1.isBrowser()) {\n        if (options && options.httpOnly) {\n            throw new Error('Can not set a httpOnly cookie in the browser.');\n        }\n        document.cookie = cookie.serialize(name, value, options);\n    }\n    return {};\n}\nexports.setCookie = setCookie;\n/**\n * Destroys a cookie with a particular name.\n *\n * @param ctx NextJS page or API context, express context, null or undefined.\n * @param name Cookie name.\n * @param options Options that we pass down to `cookie` library.\n */\nfunction destroyCookie(ctx, name, options) {\n    /**\n     * We forward the request destroy to setCookie function\n     * as it is the same function with modified maxAge value.\n     */\n    return setCookie(ctx, name, '', __assign(__assign({}, (options || {})), { maxAge: -1 }));\n}\nexports.destroyCookie = destroyCookie;\n/* Utility Exports */\nexports.default = {\n    set: setCookie,\n    get: parseCookies,\n    destroy: destroyCookie,\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}