{"ast":null,"code":"import * as yup from \"yup\";\nconst REGEX_PATTERNS = {\n  COURSE_PAGE_URL: /courses\\/[1-9]/,\n  // NATIONAL_CODE:/(^$)|(^\\d{10}$)/, for Nullable Nationa code\n  NATIONAL_CODE: /^[\\u0600-\\u06FF\\s0-9]{10}$/,\n  YEAR: /^\\d{4}$/,\n  AMOUNT: /[1-9]\\d*/,\n  MOBILE: /^(?:98|\\+98|0098|0)?9[0-9]{9}$/,\n  FTP_PATH: /^(ftp):\\/\\/[^ \"]+$/,\n  EMAIL: /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n  ACCOUNT_NUMBER: /^[0-9 ]{19}$/,\n  NATIONAL_CODE1: /^[0-9]{10}$/,\n  IBAN_NUMBER: /^[0-9 ]{30}$/,\n  ANOUNT_CURRENCY_MIN: /^[0-9 ]{1}$/,\n  ANOUNT_CURRENCY_MAX: /^[0-9 ]{5}$/\n};\nconst userSchemaObject = {\n  password: yup.string().required((\"{field} is Required\", {\n    field: \"password\"\n  })).min(8, \"Password is too short - should be 8 chars minimum\"),\n  email: yup.string().matches(REGEX_PATTERNS.EMAIL, ({\n    originalValue,\n    value\n  }) => {\n    if (!!originalValue === false) {\n      return \"{field} is Required\", {\n        field: \"email\"\n      };\n    } else if (!REGEX_PATTERNS.EMAIL.test(value)) {\n      return \"Entered value is not correct\";\n    }\n  }),\n  token: yup.string().required((\"{field} is Required\", {\n    field: \"Verification code\"\n  })).min(5, \"Verification code is too short - should be 5 chars minimum\")\n};\nexport default function getUserValidationSchema(arrayOfKeys) {\n  const keys = arrayOfKeys.length === 0 ? Object.keys(userSchemaObject) : arrayOfKeys;\n  const shape = keys.reduce((output, currentKey) => {\n    output[currentKey] = userSchemaObject[currentKey];\n    return output;\n  }, {});\n  return yup.object().shape(shape);\n}","map":{"version":3,"sources":["/home/ali/Desktop/react/ui-test/src/login/schema.js"],"names":["yup","REGEX_PATTERNS","COURSE_PAGE_URL","NATIONAL_CODE","YEAR","AMOUNT","MOBILE","FTP_PATH","EMAIL","ACCOUNT_NUMBER","NATIONAL_CODE1","IBAN_NUMBER","ANOUNT_CURRENCY_MIN","ANOUNT_CURRENCY_MAX","userSchemaObject","password","string","required","field","min","email","matches","originalValue","value","test","token","getUserValidationSchema","arrayOfKeys","keys","length","Object","shape","reduce","output","currentKey","object"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,eAAe,EAAE,gBADI;AAErB;AACAC,EAAAA,aAAa,EAAE,4BAHM;AAIrBC,EAAAA,IAAI,EAAE,SAJe;AAKrBC,EAAAA,MAAM,EAAE,UALa;AAMrBC,EAAAA,MAAM,EAAE,gCANa;AAOrBC,EAAAA,QAAQ,EAAE,oBAPW;AAQrBC,EAAAA,KAAK,EACH,2JATmB;AAUrBC,EAAAA,cAAc,EAAE,cAVK;AAWrBC,EAAAA,cAAc,EAAE,aAXK;AAYrBC,EAAAA,WAAW,EAAE,cAZQ;AAarBC,EAAAA,mBAAmB,EAAE,aAbA;AAcrBC,EAAAA,mBAAmB,EAAE;AAdA,CAAvB;AAgBA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,QAAQ,EAAEf,GAAG,CACVgB,MADO,GAEPC,QAFO,EAEG,uBAAuB;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAF1B,GAGPC,GAHO,CAGH,CAHG,EAGA,mDAHA,CADa;AAMvBC,EAAAA,KAAK,EAAEpB,GAAG,CACPgB,MADI,GAEJK,OAFI,CAEIpB,cAAc,CAACO,KAFnB,EAE0B,CAAC;AAAEc,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,GAAD,KAA8B;AAC3D,QAAI,CAAC,CAACD,aAAF,KAAoB,KAAxB,EAA+B;AAC7B,aAAO,uBAAuB;AAAEJ,QAAAA,KAAK,EAAE;AAAT,OAA9B;AACD,KAFD,MAEO,IAAI,CAACjB,cAAc,CAACO,KAAf,CAAqBgB,IAArB,CAA0BD,KAA1B,CAAL,EAAuC;AAC5C,aAAO,8BAAP;AACD;AACF,GARI,CANgB;AAevBE,EAAAA,KAAK,EAAEzB,GAAG,CACPgB,MADI,GAEJC,QAFI,EAEM,uBAAuB;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAF7B,GAGJC,GAHI,CAGA,CAHA,EAGG,4DAHH;AAfgB,CAAzB;AAqBA,eAAe,SAASO,uBAAT,CAAiCC,WAAjC,EAA8C;AAC3D,QAAMC,IAAI,GACRD,WAAW,CAACE,MAAZ,KAAuB,CAAvB,GAA2BC,MAAM,CAACF,IAAP,CAAYd,gBAAZ,CAA3B,GAA2Da,WAD7D;AAGA,QAAMI,KAAK,GAAGH,IAAI,CAACI,MAAL,CAAY,CAACC,MAAD,EAASC,UAAT,KAAwB;AAChDD,IAAAA,MAAM,CAACC,UAAD,CAAN,GAAqBpB,gBAAgB,CAACoB,UAAD,CAArC;AACA,WAAOD,MAAP;AACD,GAHa,EAGX,EAHW,CAAd;AAKA,SAAOjC,GAAG,CAACmC,MAAJ,GAAaJ,KAAb,CAAmBA,KAAnB,CAAP;AACD","sourcesContent":["import * as yup from \"yup\";\nconst REGEX_PATTERNS = {\n  COURSE_PAGE_URL: /courses\\/[1-9]/,\n  // NATIONAL_CODE:/(^$)|(^\\d{10}$)/, for Nullable Nationa code\n  NATIONAL_CODE: /^[\\u0600-\\u06FF\\s0-9]{10}$/,\n  YEAR: /^\\d{4}$/,\n  AMOUNT: /[1-9]\\d*/,\n  MOBILE: /^(?:98|\\+98|0098|0)?9[0-9]{9}$/,\n  FTP_PATH: /^(ftp):\\/\\/[^ \"]+$/,\n  EMAIL:\n    /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n  ACCOUNT_NUMBER: /^[0-9 ]{19}$/,\n  NATIONAL_CODE1: /^[0-9]{10}$/,\n  IBAN_NUMBER: /^[0-9 ]{30}$/,\n  ANOUNT_CURRENCY_MIN: /^[0-9 ]{1}$/,\n  ANOUNT_CURRENCY_MAX: /^[0-9 ]{5}$/,\n};\nconst userSchemaObject = {\n  password: yup\n    .string()\n    .required((\"{field} is Required\", { field: \"password\" }))\n    .min(8, \"Password is too short - should be 8 chars minimum\"),\n\n  email: yup\n    .string()\n    .matches(REGEX_PATTERNS.EMAIL, ({ originalValue, value }) => {\n      if (!!originalValue === false) {\n        return \"{field} is Required\", { field: \"email\" };\n      } else if (!REGEX_PATTERNS.EMAIL.test(value)) {\n        return \"Entered value is not correct\";\n      }\n    }),\n  token: yup\n    .string()\n    .required((\"{field} is Required\", { field: \"Verification code\" }))\n    .min(5, \"Verification code is too short - should be 5 chars minimum\"),\n};\n\nexport default function getUserValidationSchema(arrayOfKeys) {\n  const keys =\n    arrayOfKeys.length === 0 ? Object.keys(userSchemaObject) : arrayOfKeys;\n\n  const shape = keys.reduce((output, currentKey) => {\n    output[currentKey] = userSchemaObject[currentKey];\n    return output;\n  }, {});\n\n  return yup.object().shape(shape);\n}\n"]},"metadata":{},"sourceType":"module"}