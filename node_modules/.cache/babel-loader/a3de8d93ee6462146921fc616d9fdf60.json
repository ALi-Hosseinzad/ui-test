{"ast":null,"code":"var _jsxFileName = \"/home/ali/Desktop/react/ui-test/src/customTable/CustomTable.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { Link } from \"react-router-dom\";\nimport { Pagination, PaginationItem } from \"@material-ui/lab\";\nimport { Grid, Paper } from \"@material-ui/core\";\nimport useStyles from \"./styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CustomTableWithPagination = props => {\n  _s();\n\n  let {\n    className,\n    TableOption,\n    data,\n    is_fetch,\n    handleChange,\n    pageNumber,\n    count,\n    pageSize,\n    pagination,\n    handleClick,\n    paper = true,\n    stickyHeader = false\n  } = props;\n  console.log(props);\n  const classes = useStyles(props);\n\n  const getCellContent = (row, col, index) => {\n    if (col === null || col === void 0 ? void 0 : col.render) {\n      return col === null || col === void 0 ? void 0 : col.render(row, col === null || col === void 0 ? void 0 : col.name, index);\n    } else {\n      return row[col === null || col === void 0 ? void 0 : col.name];\n    }\n  };\n\n  const drawTable = () => {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 0,\n      direction: \"column\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        className: classes.container,\n        children: is_fetch ? (data === null || data === void 0 ? void 0 : data.length) > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: className,\n          children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              stickyHeader: stickyHeader,\n              className: classes.table,\n              children: [/*#__PURE__*/_jsxDEV(\"colgroup\", {\n                children: TableOption === null || TableOption === void 0 ? void 0 : TableOption.map(item => /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: /*#__PURE__*/_jsxDEV(\"col\", {\n                    style: {\n                      width: item === null || item === void 0 ? void 0 : item.width\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 51,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n                className: classes.tableHead,\n                children: /*#__PURE__*/_jsxDEV(TableRow, {\n                  className: classes.tableRow,\n                  children: TableOption === null || TableOption === void 0 ? void 0 : TableOption.map(item => /*#__PURE__*/_jsxDEV(TableCell, {\n                    className: classes.tableCell,\n                    align: item.align ? item.align : \"center\",\n                    children: item.title\n                  }, item.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 58,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                children: (pageSize > 0 ? data.slice((Number(pageNumber) - 1) * pageSize, (Number(pageNumber) - 1) * pageSize + pageSize) : data).map((row, index) => {\n                  return /*#__PURE__*/_jsxDEV(TableRow, {\n                    id: (row === null || row === void 0 ? void 0 : row.currencyName) && (row === null || row === void 0 ? void 0 : row.currencyName),\n                    className: classes.tableRow,\n                    onClick: handleClick,\n                    children: TableOption === null || TableOption === void 0 ? void 0 : TableOption.map(item => /*#__PURE__*/_jsxDEV(TableCell, {\n                      className: classes.tableCell,\n                      align: (item === null || item === void 0 ? void 0 : item.align) ? item === null || item === void 0 ? void 0 : item.align : \"center\",\n                      children: getCellContent(row, item, index)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 84,\n                      columnNumber: 31\n                    }, this))\n                  }, row === null || row === void 0 ? void 0 : row.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 77,\n                    columnNumber: 27\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, this), pageSize && pagination && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.pagination,\n            children: /*#__PURE__*/_jsxDEV(Pagination, {\n              page: Number(pageNumber),\n              count: Math.ceil(data.length / pageSize),\n              onChange: handleChange,\n              shape: \"rounded\",\n              color: \"primary\",\n              showFirstButton: true,\n              showLastButton: true,\n              boundaryCount: 2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"There is no data to display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Loading ...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  };\n\n  return paper ? /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.paper,\n    children: drawTable()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this) : drawTable();\n};\n\n_s(CustomTableWithPagination, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = CustomTableWithPagination;\nexport default CustomTableWithPagination;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomTableWithPagination\");","map":{"version":3,"sources":["/home/ali/Desktop/react/ui-test/src/customTable/CustomTable.js"],"names":["React","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Link","Pagination","PaginationItem","Grid","Paper","useStyles","CustomTableWithPagination","props","className","TableOption","data","is_fetch","handleChange","pageNumber","count","pageSize","pagination","handleClick","paper","stickyHeader","console","log","classes","getCellContent","row","col","index","render","name","drawTable","container","length","table","map","item","width","tableHead","tableRow","tableCell","align","title","id","slice","Number","currencyName","Math","ceil"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { Link } from \"react-router-dom\";\nimport { Pagination, PaginationItem } from \"@material-ui/lab\";\nimport { Grid, Paper } from \"@material-ui/core\";\nimport useStyles from \"./styles\";\n\nconst CustomTableWithPagination = (props) => {\n  let {\n    className,\n    TableOption,\n    data,\n    is_fetch,\n    handleChange,\n    pageNumber,\n    count,\n    pageSize,\n    pagination,\n    handleClick,\n    paper = true,\n    stickyHeader = false,\n  } = props;\n  console.log(props);\n  const classes = useStyles(props);\n\n  const getCellContent = (row, col, index) => {\n    if (col?.render) {\n      return col?.render(row, col?.name, index);\n    } else {\n      return row[col?.name];\n    }\n  };\n\n  const drawTable = () => {\n    return (\n      <Grid container spacing={0} direction=\"column\">\n        <Grid item className={classes.container}>\n          {is_fetch ? (\n            data?.length > 0 ? (\n              <div className={className}>\n                <TableContainer>\n                  <Table stickyHeader={stickyHeader} className={classes.table}>\n                    <colgroup>\n                      {TableOption?.map((item) => (\n                        <>\n                          <col style={{ width: item?.width }} />\n                        </>\n                      ))}\n                    </colgroup>\n                    <TableHead className={classes.tableHead}>\n                      <TableRow className={classes.tableRow}>\n                        {TableOption?.map((item) => (\n                          <TableCell\n                            key={item.id}\n                            className={classes.tableCell}\n                            align={item.align ? item.align : \"center\"}\n                          >\n                            {item.title}\n                          </TableCell>\n                        ))}\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {(pageSize > 0\n                        ? data.slice(\n                            (Number(pageNumber) - 1) * pageSize,\n                            (Number(pageNumber) - 1) * pageSize + pageSize\n                          )\n                        : data\n                      ).map((row, index) => {\n                        return (\n                          <TableRow\n                            key={row?.id}\n                            id={row?.currencyName && row?.currencyName}\n                            className={classes.tableRow}\n                            onClick={handleClick}\n                          >\n                            {TableOption?.map((item) => (\n                              <TableCell\n                                className={classes.tableCell}\n                                align={item?.align ? item?.align : \"center\"}\n                              >\n                                {getCellContent(row, item, index)}\n                              </TableCell>\n                            ))}\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n                {pageSize && pagination && (\n                  <div className={classes.pagination}>\n                    <Pagination\n                      page={Number(pageNumber)}\n                      count={Math.ceil(data.length / pageSize)}\n                      onChange={handleChange}\n                      shape=\"rounded\"\n                      color=\"primary\"\n                      showFirstButton\n                      showLastButton\n                      boundaryCount={2}\n                    />\n                  </div>\n                )}\n              </div>\n            ) : (\n              <span>{\"There is no data to display\"}</span>\n            )\n          ) : (\n            <span>Loading ...</span>\n          )}\n        </Grid>\n      </Grid>\n    );\n  };\n\n  return paper ? (\n    <Paper className={classes.paper}>{drawTable()}</Paper>\n  ) : (\n    drawTable()\n  );\n};\n\nexport default CustomTableWithPagination;\n"]},"metadata":{},"sourceType":"module"}